name: Build & Push Docker Image

on:
  workflow_call:
    inputs:
      CONTEXT:
        type: string
        default: .
      CACHE_REGISTRY:
        type: string
        default: cache-registry.mrcr.io
      REGISTRY:
        type: string
        default: 155215722524.dkr.ecr.eu-central-1.amazonaws.com
      DOCKERFILE:
        type: string
        default: Dockerfile
      IMAGE_TAG:
        type: string
        default: ${{ github.ref_name }}-${{ github.run_number }}
      IMAGE_TAG_LATEST:
        type: string
        default: ${{ github.ref_name }}-latest
      NO_CACHE:
        type: boolean
        default: false
      PLATFORMS:
        type: string
        default: linux/amd64
      PUSH_IMAGE:
        type: boolean
        default: true
      REPOSITORY:
        type: string
        default: ${{ github.event.repository.name }}
      RUNNER:
        type: string
        default: self-hosted-general
    secrets:
      ACCESS_TOKEN:
        required: true
      BUILD_ARGS:
        required: false
      SLACK_BOT_TOKEN:
        required: false

jobs:
  build-and-push:
    name: Build and push docker image
    runs-on: ${{ inputs.RUNNER }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.1.0
        with:
          platforms: amd64,arm64
      - name: Set up docker buildx context
        id: buildx-context
        run: |
          docker context create builders
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.2.1
        with:
          endpoint: builders
          version: v0.9.1
      - name: Login to docker registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ inputs.REGISTRY }}
      - name: Customize image list
        id: image-list
        run: |
          import os

          RUN_NUMBER = "${{ github.run_number }}"
          TAG, TAG_LATEST = "${{ inputs.IMAGE_TAG }}", "${{ inputs.IMAGE_TAG_LATEST }}"
          REGISTRY, REPOSITORY = "${{ inputs.REGISTRY }}", "${{ inputs.REPOSITORY }}"

          def create_image_tag(tag: str, is_tag_latest: bool = False) -> str:
              repository = f"{REGISTRY}/{REPOSITORY}"
              if '/' not in tag:
                  return f"{repository}:{tag}"
              else:
                  return f"{repository}:{'build-latest'}" if is_tag_latest else f"{repository}:{f'build-{RUN_NUMBER}'}"

          output_tag = create_image_tag(TAG)
          output_tag_latest = create_image_tag(TAG_LATEST, True)

          os.system(f'echo "IMAGE_TAG={output_tag}" >> $GITHUB_OUTPUT')
          os.system(f'echo "IMAGE_TAG_LATEST={output_tag_latest}" >> $GITHUB_OUTPUT')
        shell: python
      - name: Build and push docker images
        id: docker-build
        uses: docker/build-push-action@v3.2.0
        with:
          build-args: |
            GITHUB_TOKEN=${{ secrets.ACCESS_TOKEN }}
            ${{ secrets.BUILD_ARGS }}
          cache-from: type=registry,ref=${{ inputs.CACHE_REGISTRY }}/${{ inputs.REPOSITORY }}:buildcache
          cache-to: type=registry,ref=${{ inputs.CACHE_REGISTRY }}/${{ inputs.REPOSITORY }}:buildcache,mode=max
          context: ${{ inputs.CONTEXT }}
          file: ${{ inputs.DOCKERFILE }}
          no-cache: ${{ inputs.NO_CACHE }}
          platforms: ${{ inputs.PLATFORMS }}
          push: ${{ inputs.PUSH_IMAGE }}
          tags: |
            ${{ steps.image-list.outputs.IMAGE_TAG }}
            ${{ steps.image-list.outputs.IMAGE_TAG_LATEST }}

      # - name: Slack alert condition
      #   if: success() || failure()
      #   id: slack-alert-flag
      #   run: |
      #     import os

      #     BRANCH_NAME = '${{ github.ref_name }}'
      #     OUTCOME = '${{ steps.docker-build.outcome }}'
      #     PUSH_IMAGE = bool('${{ inputs.PUSH_IMAGE }}')
      #     SLACK_TOKEN = '${{ secrets.SLACK_BOT_TOKEN }}'

      #     general_condition = BRANCH_NAME in ['develop', 'master'] and PUSH_IMAGE and SLACK_TOKEN != ''
      #     success_condition = OUTCOME == 'success' and general_condition
      #     failure_condition = OUTCOME == 'failure' and general_condition

      #     print(success_condition)
      #     print(failure_condition)

      #     os.system(f'echo "SLACK_SUCCESS_FLAG={success_condition}" >> $GITHUB_OUTPUT')
      #     os.system(f'echo "SLACK_FAILURE_FLAG={failure_condition}" >> $GITHUB_OUTPUT')
      #   shell: python
      # - name: Send a successful Slack notification
      #   if: success() && steps.slack-alert-flag.outputs.SLACK_SUCCESS_FLAG == 'True'
      #   uses: slackapi/slack-github-action@v1.23.0
      #   with:
      #     channel-id: "C049W03GZQT"
      #     payload: |
      #       {
      #         "text": ":white_check_mark: *${{ inputs.REPOSITORY }}* – `${{ github.ref_name }}-${{ github.run_number }}` successful build"
      #       }
      #   env:
      #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      # - name: Send a failure Slack notification
      #   if: failure() && steps.slack-alert-flag.outputs.SLACK_FAILURE_FLAG == 'True'
      #   uses: slackapi/slack-github-action@v1.23.0
      #   with:
      #     channel-id: "C049W03GZQT"
      #     payload: |
      #       {
      #         "text": ":ahhhhhhhhh: *${{ inputs.REPOSITORY }}* – `${{ github.ref_name }}-${{ github.run_number }}` failed build:\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
      #       }
      #   env:
      #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
